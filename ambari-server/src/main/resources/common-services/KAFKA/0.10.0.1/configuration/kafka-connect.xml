<!--
/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->

<configuration>
    <property>
        <name>rest.port</name>
        <value>8083</value>
        <display-name>REST port</display-name>
        <description>
            REST Api port.
        </description>
        <value-attributes>
            <type>int</type>
        </value-attributes>
    </property>

    <property>
        <name>group.id</name>
        <value>connect-cluster</value>
        <display-name>Group id</display-name>
        <description>
            Unique name for the cluster, used in forming the Connect cluster group.
            Note that this must not conflict with consumer group IDs.
        </description>
    </property>

    <property>
        <name>offset.storage.topic</name>
        <value>connect-offsets</value>
        <display-name>Offser storage topic</display-name>
        <description>
            Topic to use for storing offsets. This topic should have many partitions and be replicated.
        </description>
    </property>

    <property>
        <name>config.storage.topic</name>
        <value>connect-config</value>
        <display-name>Config storage topic</display-name>
        <description>
            Topic to use for storing connector and task configurations; note that this should be a single partition,
            highly replicated topic. You may need to manually create the topic to ensure single partition for the
            config topic as auto created topics may have multiple partitions.
        </description>
    </property>

    <property>
        <name>status.storage.topic</name>
        <value>connect-status</value>
        <display-name>Status storage topic</display-name>
        <description>
            Topic to use for storing statuses. This topic can have multiple partitions and should be replicated.
        </description>
    </property>

    <property>
        <name>offset.flush.interval.ms</name>
        <value>10000</value>
        <display-name>Offset flush interval ms</display-name>
        <description>
            Flush much faster than normal, which is useful for testing/debugging.
        </description>
        <value-attributes>
            <type>int</type>
        </value-attributes>
    </property>

    <property>
        <name>key.converter</name>
        <value>org.apache.kafka.connect.json.JsonConverter</value>
        <display-name>Key converter</display-name>
        <description>
            The converters specify the format of data in Kafka and how to translate it into Connect data.
            Every Connect user will need to configure these based on the format they want their data in when
            loaded from or stored into Kafka.
        </description>
    </property>

    <property>
        <name>value.converter</name>
        <value>org.apache.kafka.connect.json.JsonConverter</value>
        <display-name>Value converter</display-name>
        <description>
            The converters specify the format of data in Kafka and how to translate it into Connect data.
            Every Connect user will need to configure these based on the format they want their data in when
            loaded from or stored into Kafka.
        </description>
    </property>

    <property>
        <name>key.converter.schemas.enable</name>
        <value>true</value>
        <description>
            Converter-specific settings can be passed in by prefixing the Converter's setting with the converter
            we want to apply it to.
        </description>
        <value-attributes>
            <type>boolean</type>
        </value-attributes>
    </property>

    <property>
        <name>value.converter.schemas.enable</name>
        <value>true</value>
        <description>
            Converter-specific settings can be passed in by prefixing the Converter's setting with the converter
            we want to apply it to.
        </description>
        <value-attributes>
            <type>boolean</type>
        </value-attributes>
    </property>

    <property>
        <name>internal.key.converter</name>
        <value>org.apache.kafka.connect.json.JsonConverter</value>
        <display-name>Internal key converter</display-name>
        <description>
            The converters specify the format of data in Kafka and how to translate it into Connect data.
            Every Connect user will need to configure these based on the format they want their data in when
            loaded from or stored into Kafka.
        </description>
    </property>

    <property>
        <name>internal.value.converter</name>
        <value>org.apache.kafka.connect.json.JsonConverter</value>
        <display-name>Internal value converter</display-name>
        <description>
            The converters specify the format of data in Kafka and how to translate it into Connect data.
            Every Connect user will need to configure these based on the format they want their data in when
            loaded from or stored into Kafka.
        </description>
    </property>

    <property>
        <name>internal.key.converter.schemas.enable</name>
        <value>false</value>
        <description>
            Converter-specific settings can be passed in by prefixing the Converter's setting with the converter
            we want to apply it to.
        </description>
        <value-attributes>
            <type>boolean</type>
        </value-attributes>
    </property>

    <property>
        <name>internal.value.converter.schemas.enable</name>
        <value>false</value>
        <description>
            Converter-specific settings can be passed in by prefixing the Converter's setting with the converter
            we want to apply it to.
        </description>
        <value-attributes>
            <type>boolean</type>
        </value-attributes>
    </property>
</configuration>